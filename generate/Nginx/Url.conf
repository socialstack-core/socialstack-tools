server {
	listen 80;
	listen [::]:80;

	charset utf-8;
	index index.html index.php;
	error_log /dev/null;
	access_log /dev/null;
	
	server_name UrlSet;

	location /.well-known {
	
		root /var/www/certbot;
		try_files $uri =404;
		
	}

	location / {
		return 301 https://PreferredUrl$request_uri;
	}
}

server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	# ssl_certificate /etc/letsencrypt/live/Url/fullchain.pem;
	# ssl_certificate_key /etc/letsencrypt/live/Url/privkey.pem;
	server_name RootUrl;
	
	location / {
		return 301 https://PreferredUrl$request_uri;
	}
}

server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	# ssl_certificate /etc/letsencrypt/live/Url/fullchain.pem;
	# ssl_certificate_key /etc/letsencrypt/live/Url/privkey.pem;
	server_name UrlsNoRoot;
	server_tokens off;
	charset utf-8;
	index index.html index.json index.php;
	root "RemoteDirectory/UI/public";

    location /block.html
    {
        try_files $uri $uri/ /block.html;
	}
	
	location /.well-known
    {
		root /var/www/certbot;
		try_files $uri =404;
		
	}
	
	error_page 404 /error.html;
	error_page 500 502 503 504 /error.html;
	
	location ~ ^/en-admin
	{
		gzip_static on;
		add_header Cache-control no-store;
		add_header Pragma no-cache;
		add_header X-Content-Type-Options "nosniff";
		add_header X-Frame-Options sameorigin;
		
		proxy_pass http://unix:/var/www/prod/api.sock;  # Kestrel (.NET Core webserver)
        proxy_http_version 1.1;
        proxy_set_header Host $host;
	}
	
    location ~ ^/content/
    {
        gzip_static on;
		expires max;
		add_header Cache-Control public; 
		add_header X-Frame-Options sameorigin;
		add_header X-Content-Type-Options "nosniff";
		add_header Referrer-Policy strict-origin-when-cross-origin;
		try_files $uri $uri/ index.html;
		
        root "RemoteDirectory/Content";
    }
    
    location ~ ^/content/.+\.(m3u8)$
    {
        gzip_static on;
		add_header Cache-control no-store;
		add_header Pragma no-cache;
		add_header X-Frame-Options sameorigin;
		add_header X-Content-Type-Options "nosniff";
		add_header Referrer-Policy strict-origin-when-cross-origin;
		try_files $uri $uri/ index.html;
		
        root "RemoteDirectory/Content";
    }
    
    location ~ ^/content-private/
    {
        proxy_pass http://unix:RemoteDirectory/api.sock;    # Kestrel (.NET Core webserver)
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        client_max_body_size 512M;
        proxy_set_header Connection keep-alive;
		add_header Cache-control no-store;
		add_header Pragma no-cache;
		add_header X-Content-Type-Options "nosniff";
		add_header X-Frame-Options sameorigin;
    }
    
	location ~ ^/v1/
	{
		proxy_pass http://unix:RemoteDirectory/api.sock;  # Kestrel (.NET Core webserver)
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        client_max_body_size 512M;
		proxy_set_header Connection keep-alive;
		add_header Cache-control no-store;
		add_header Pragma no-cache;
		add_header X-Content-Type-Options "nosniff";
		add_header X-Frame-Options sameorigin;
	}
    
    location ~ ^/live-websocket/
    {
        proxy_pass http://unix:RemoteDirectory/ws.sock;  # Kestrel (.NET Core webserver)
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
		add_header Cache-control no-store;
		add_header Pragma no-cache;
    }
    
	location /
	{
		gzip_static on;
		add_header Cache-control no-store;
		add_header Pragma no-cache;
		add_header X-Frame-Options sameorigin;
		add_header X-XSS-Protection "1; mode=block";
		add_header Referrer-Policy strict-origin-when-cross-origin;
		add_header X-Content-Type-Options "nosniff";
		add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
		
        proxy_pass http://unix:/var/www/prod/api.sock;  # Kestrel (.NET Core webserver)
        proxy_http_version 1.1;
        proxy_set_header Host $host;
	}
}


map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}